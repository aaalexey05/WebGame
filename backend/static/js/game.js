// =======================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API
// =======================
const API_BASE = '/api';

// =======================
// –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´
// =======================
let gameState = {
    score: 0,
    clickPower: 1,
    perSecond: 0,
    upgrades: [],
    achievements: [],
    skins: [],
    activeSkin: null
};

let pendingClicks = 0;  // –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
let isSendingClicks = false;  // –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏

// =======================
// –®–ê–ë–õ–û–ù–´ –î–ê–ù–ù–´–• (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
// =======================
const upgradesData = [
    {
        id: 'cursor',
        name: '–ö—É—Ä—Å–æ—Ä',
        icon: 'üëÜ',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç 1 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É',
        baseCost: 15,
        baseProduction: 1
    },
    {
        id: 'grandma',
        name: '–ë–∞–±—É—à–∫–∞',
        icon: 'üëµ',
        description: '–ü–µ—á–µ—Ç –ø–µ—á–µ–Ω—å–∫–∏ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç 5 –æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É',
        baseCost: 100,
        baseProduction: 5
    },
    {
        id: 'farm',
        name: '–§–µ—Ä–º–∞',
        icon: 'üåæ',
        description: '–í—ã—Ä–∞—â–∏–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã: 20 –æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É',
        baseCost: 500,
        baseProduction: 20
    },
    {
        id: 'factory',
        name: '–§–∞–±—Ä–∏–∫–∞',
        icon: 'üè≠',
        description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã: 50 –æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É',
        baseCost: 2000,
        baseProduction: 50
    },
    {
        id: 'mine',
        name: '–®–∞—Ö—Ç–∞',
        icon: '‚õèÔ∏è',
        description: '–î–æ–±—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã: 100 –æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É',
        baseCost: 5000,
        baseProduction: 100
    },
    {
        id: 'bank',
        name: '–ë–∞–Ω–∫',
        icon: 'üè¶',
        description: '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω—å–≥–∏: 200 –æ—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É',
        baseCost: 10000,
        baseProduction: 200
    }
];

// =======================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø 
// =======================
async function initGame() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const response = await fetch(`${API_BASE}/user/state`);
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gameState.score = data.score;
        gameState.perSecond = data.per_second || 0;
        gameState.upgrades = data.upgrades || [];
        gameState.achievements = data.achievements || [];
        gameState.skins = data.skins || [];
        gameState.activeSkin = data.active_skin;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω
        if (gameState.activeSkin) {
            applySkin(gameState.activeSkin.colors);
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        renderShop();
        renderSkins();
        renderAchievements();
        updateDisplay();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        startGameLoop();
        
    } catch (error) {
        console.error('Error loading game:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã', 'error');
    }
}

// =======================
// –ò–ì–†–û–í–û–ô –¶–ò–ö–õ
// =======================
function startGameLoop() {
    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ UI)
    setInterval(visualAutoProduction, 1000);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–∫–æ–≤ –±–∞—Ç—á–∞–º–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(flushPendingClicks, 5000);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(syncWithServer, 60000);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', saveBeforeExit);
}

// =======================
// –í–ò–ó–£–ê–õ–¨–ù–û–ï –ê–í–¢–û–ü–†–û–ò–ó–í–û–î–°–¢–í–û
// =======================
function visualAutoProduction() {
    // –õ–æ–∫–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ UI
    if (gameState.perSecond > 0) {
        gameState.score += gameState.perSecond;
        updateDisplay();
    }
}

// =======================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê (–ë–ê–¢–ß–ò–ù–ì)
// =======================
document.getElementById('clickButton').addEventListener('click', function(e) {
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    gameState.score += gameState.clickPower;
    pendingClicks += gameState.clickPower;  // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º
    updateDisplay();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const character = document.getElementById('character');
    character.classList.add('happy');
    setTimeout(() => character.classList.remove('happy'), 500);
    
    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    createParticle(e.clientX, e.clientY, `+${gameState.clickPower}`);
});

// =======================
// –û–¢–ü–†–ê–í–ö–ê –ù–ê–ö–û–ü–õ–ï–ù–ù–´–• –ö–õ–ò–ö–û–í
// =======================
async function flushPendingClicks() {
    if (pendingClicks === 0 || isSendingClicks) return;
    
    isSendingClicks = true;
    const clicksToSend = pendingClicks;
    pendingClicks = 0;  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    
    try {
        const response = await fetch(`${API_BASE}/user/click`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({clickPower: clicksToSend})
        });
        
        const data = await response.json();
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º score —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–æ–Ω —É–∂–µ —Å –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º)
        gameState.score = data.score;
        gameState.perSecond = data.per_second || gameState.perSecond;
        updateDisplay();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (data.unlocked_achievements && data.unlocked_achievements.length > 0) {
            data.unlocked_achievements.forEach(achievement => {
                showNotification(`üéâ ${achievement.name}!`, 'success');
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            await syncAchievements();
        }
        
    } catch (error) {
        console.error('Error flushing clicks:', error);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
        pendingClicks += clicksToSend;
    } finally {
        isSendingClicks = false;
    }
}

// =======================
// –ü–û–ö–£–ü–ö–ê –£–õ–£–ß–®–ï–ù–ò–Ø
// =======================
async function buyUpgrade(upgradeName) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
    await flushPendingClicks();
    
    try {
        const response = await fetch(`${API_BASE}/upgrades/buy`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({name: upgradeName})
        });
        
        const data = await response.json();
        
        if (data.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            gameState.score = data.score || data.user_score;
            gameState.perSecond = data.per_second || gameState.perSecond;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ
            const existingIndex = gameState.upgrades.findIndex(u => u.name === upgradeName);
            if (existingIndex >= 0) {
                gameState.upgrades[existingIndex] = data.upgrade;
            } else {
                gameState.upgrades.push(data.upgrade);
            }
            
            renderShop();
            updateDisplay();
            
            showNotification(`‚úÖ –ö—É–ø–ª–µ–Ω–æ: ${upgradeName}!`, 'success');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (data.unlocked_achievements && data.unlocked_achievements.length > 0) {
                data.unlocked_achievements.forEach(achievement => {
                    showNotification(`üéâ ${achievement.name}!`, 'success');
                });
                await syncAchievements();
            }
        } else {
            showNotification('‚ùå ' + (data.error || '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤'), 'error');
        }
        
    } catch (error) {
        console.error('Error buying upgrade:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏', 'error');
    }
}

// =======================
// –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° –°–ï–†–í–ï–†–û–ú
// =======================
async function syncWithServer() {
    try {
        const response = await fetch(`${API_BASE}/user/state`);
        const data = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Å–µ—Ä–≤–µ—Ä - –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
        gameState.score = data.score;
        gameState.perSecond = data.per_second || 0;
        gameState.upgrades = data.upgrades || [];
        gameState.achievements = data.achievements || [];
        gameState.skins = data.skins || [];
        
        updateDisplay();
        renderShop();
        renderAchievements();
        
    } catch (error) {
        console.error('Sync error:', error);
    }
}

// =======================
// –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô
// =======================
async function syncAchievements() {
    try {
        const response = await fetch(`${API_BASE}/achievements/`);
        gameState.achievements = await response.json();
        renderAchievements();
    } catch (error) {
        console.error('Error syncing achievements:', error);
    }
}

// =======================
// –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–ò –ó–ê–ö–†–´–¢–ò–ò –°–¢–†–ê–ù–ò–¶–´
// =======================
function saveBeforeExit(event) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    if (pendingClicks > 0) {
        navigator.sendBeacon(`${API_BASE}/user/click`, JSON.stringify({
            clickPower: pendingClicks
        }));
    }
}

// =======================
// –ü–û–ö–£–ü–ö–ê –°–ö–ò–ù–ê
// =======================
async function buySkin(skinId) {
    try {
        const response = await fetch(`${API_BASE}/skins/buy`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({skin_id: skinId})
        });
        
        const data = await response.json();
        
        if (data.success) {
            gameState.score = data.score || data.user_score;
            showNotification('‚úÖ –°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!', 'success');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤
            const stateResponse = await fetch(`${API_BASE}/user/state`);
            const stateData = await stateResponse.json();
            gameState.skins = stateData.skins;
            
            renderSkins();
            updateDisplay();
        } else {
            showNotification('‚ùå ' + data.error, 'error');
        }
        
    } catch (error) {
        console.error('Error buying skin:', error);
    }
}

// =======================
// –ê–ö–¢–ò–í–ê–¶–ò–Ø –°–ö–ò–ù–ê
// =======================
async function activateSkin(skinId) {
    try {
        const response = await fetch(`${API_BASE}/skins/activate`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({skin_id: skinId})
        });
        
        const data = await response.json();
        
        if (data.success) {
            gameState.activeSkin = data.skin;
            applySkin(data.skin.colors);
            showNotification('‚úÖ –°–∫–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'success');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            const stateResponse = await fetch(`${API_BASE}/user/state`);
            const stateData = await stateResponse.json();
            gameState.skins = stateData.skins;
            
            renderSkins();
        }
        
    } catch (error) {
        console.error('Error activating skin:', error);
    }
}

// =======================
// –û–¢–†–ò–°–û–í–ö–ê –ú–ê–ì–ê–ó–ò–ù–ê
// =======================
function renderShop() {
    const shopContainer = document.getElementById('shopItems');
    shopContainer.innerHTML = '';
    
    upgradesData.forEach(template => {
        // –ù–∞—Ö–æ–¥–∏–º —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userUpgrade = gameState.upgrades.find(u => u.name === template.name);
        const level = userUpgrade ? userUpgrade.level : 0;
        const currentCost = userUpgrade ? userUpgrade.current_cost : template.baseCost;
        const production = userUpgrade ? userUpgrade.current_production : 0;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        const canAfford = gameState.score >= currentCost;
        
        const item = document.createElement('div');
        item.className = 'shop-item';
        
        item.innerHTML = `
            <div class="shop-item-icon">${template.icon}</div>
            <div class="shop-item-info">
                <div class="shop-item-name">${template.name}</div>
                <div class="shop-item-description">${template.description}</div>
                <div class="shop-item-stats">
                    <span class="shop-item-cost">${formatNumber(currentCost)}</span>
                    <span class="shop-item-owned">–ö—É–ø–ª–µ–Ω–æ: ${level}</span>
                </div>
                <div style="margin-top: 10px; font-size: 14px; color: #667eea;">
                    –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${production}/—Å–µ–∫
                </div>
            </div>
            <button 
                class="shop-item-button" 
                onclick="buyUpgrade('${template.name}')"
                ${canAfford ? '' : 'disabled'}
            >
                –ö—É–ø–∏—Ç—å
            </button>
        `;
        
        shopContainer.appendChild(item);
    });
}

// =======================
// –û–¢–†–ò–°–û–í–ö–ê –°–ö–ò–ù–û–í
// =======================
function renderSkins() {
    const container = document.getElementById('skinsContainer');
    container.innerHTML = '';
    
    gameState.skins.forEach(skin => {
        const item = document.createElement('div');
        item.className = 'shop-item skin';
        
        if (skin.is_owned) {
            item.classList.add('owned');
        }
        if (skin.is_active) {
            item.classList.add('active');
        }
        
        item.innerHTML = `
            <div class="shop-item-icon">üé®</div>
            <div class="shop-item-info">
                <div class="shop-item-name">${skin.name}</div>
                <div class="shop-item-description">${skin.description}</div>
                <div class="shop-item-stats">
                    ${skin.is_owned ? 
                        '<span style="color: #4CAF50; font-weight: bold;">‚úì –ö—É–ø–ª–µ–Ω</span>' : 
                        `<span class="shop-item-cost">${formatNumber(skin.base_cost)}</span>`
                    }
                </div>
            </div>
            ${skin.is_owned ? 
                `<button 
                    class="shop-item-button" 
                    onclick="activateSkin(${skin.skin_id})"
                    ${skin.is_active ? 'disabled' : ''}
                >
                    ${skin.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                </button>` :
                `<button 
                    class="shop-item-button" 
                    onclick="buySkin(${skin.skin_id})"
                    ${gameState.score < skin.base_cost ? 'disabled' : ''}
                >
                    –ö—É–ø–∏—Ç—å
                </button>`
            }
        `;
        
        container.appendChild(item);
    });
}

// =======================
// –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–ö–ò–ù–ê
// =======================
function applySkin(colors) {
    document.body.style.background = `linear-gradient(135deg, ${colors.primary} 0%, ${colors.secondary} 100%)`;
    
    const header = document.querySelector('.header');
    if (header) {
        header.style.background = `linear-gradient(135deg, ${colors.primary} 0%, ${colors.secondary} 100%)`;
    }
    
    const clickButton = document.querySelector('.click-button');
    if (clickButton) {
        clickButton.style.background = colors.button;
    }
    
    const character = document.querySelector('.char-body');
    if (character) {
        character.setAttribute('fill', colors.character);
    }
}

// =======================
// –û–¢–†–ò–°–û–í–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
// =======================
function renderAchievements() {
    const container = document.getElementById('achievementsContainer');
    container.innerHTML = '';
    
    gameState.achievements.forEach(achievement => {
        const item = document.createElement('div');
        item.className = 'achievement-item';
        
        if (achievement.is_unlocked) {
            item.classList.add('unlocked');
        } else {
            item.classList.add('locked');
        }
        
        item.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-name">${achievement.name}</div>
            <div class="achievement-description">${achievement.description}</div>
            <div class="achievement-status ${achievement.is_unlocked ? 'unlocked' : 'locked'}">
                ${achievement.is_unlocked ? '‚úì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ' : 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}
            </div>
        `;
        
        container.appendChild(item);
    });
}

// =======================
// –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö
// =======================
function switchTab(tabName) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–æ–≤
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    if (tabName === 'game') {
        document.querySelectorAll('.tab-btn')[0].classList.add('active');
        document.getElementById('gameTab').classList.add('active');
    } else if (tabName === 'shop') {
        document.querySelectorAll('.tab-btn')[1].classList.add('active');
        document.getElementById('shopTab').classList.add('active');
    } else if (tabName === 'achievements') {
        document.querySelectorAll('.tab-btn')[2].classList.add('active');
        document.getElementById('achievementsTab').classList.add('active');
    }
}

// =======================
// –í–ò–ó–£–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´
// =======================
function createParticle(x, y, text) {
    const particle = document.createElement('div');
    particle.className = 'particle';
    particle.textContent = text;
    particle.style.left = x + 'px';
    particle.style.top = y + 'px';
    
    document.getElementById('particlesContainer').appendChild(particle);
    
    setTimeout(() => particle.remove(), 1000);
}

// =======================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// =======================
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-out';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// =======================
// –£–¢–ò–õ–ò–¢–´
// =======================
function formatNumber(num) {
    return Math.floor(num).toLocaleString();
}

function updateDisplay() {
    document.getElementById('score').textContent = formatNumber(gameState.score);
    document.getElementById('perSecond').textContent = formatNumber(gameState.perSecond);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
    renderShop();
    renderSkins();
}

// =======================
// –ó–ê–ü–£–°–ö –ò–ì–†–´
// =======================
window.addEventListener('DOMContentLoaded', initGame);
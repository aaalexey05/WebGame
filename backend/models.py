from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import JSON
import uuid
from datetime import datetime
from sqlalchemy.sql import func


db = SQLAlchemy()


class User(db.Model):
    __tablename__ = 'users'

    user_id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(36), unique=True, nullable=False)
    score = db.Column(db.Integer, default=0)
    last_update = db.Column(db.DateTime(timezone=True), default=datetime.now())
    created_at = db.Column(db.DateTime(timezone=True), server_default=func.now())
    
    # Relationships 
    achievements = db.relationship('Achievement', backref='user', lazy=True, cascade="all, delete-orphan")
    upgrades = db.relationship('Upgrade', backref='user', lazy=True, cascade="all, delete-orphan")
    skins = db.relationship('Skin', backref='user', lazy=True, cascade="all, delete-orphan")

    def __init__(self):
        self.username = str(uuid.uuid4())
        self.last_update = datetime.now()

    def apply_auto_production(self, per_second):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è"""
        if per_second > 0 and self.last_update:
            time_passed = (datetime.now() - self.last_update).total_seconds()
            earned = int(per_second * time_passed)
            self.score += earned
        self.last_update = datetime.now()
        return self.score

    def __repr__(self):
        return f'<User: {self.username}, Score: {self.score}>'


class Achievement(db.Model):
    __tablename__ = 'achievements'

    achievement_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255))
    icon = db.Column(db.String(255))  # –≠–º–æ–¥–∑–∏: 'üèÜ', '‚≠ê', 'üéØ'
    is_unlocked = db.Column(db.Boolean, default=False)
    achieved_at = db.Column(db.DateTime(timezone=True), nullable=True)  # NULL –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
    
    # Foreign Key
    user_id = db.Column(db.Integer, db.ForeignKey('users.user_id'), nullable=False)

    def unlock(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if not self.is_unlocked:
            self.is_unlocked = True
            self.achieved_at = datetime.now()

    def to_dict(self):
        return {
            'achievement_id': self.achievement_id,
            'name': self.name,
            'description': self.description,
            'icon': self.icon,
            'is_unlocked': self.is_unlocked,
            'achieved_at': self.achieved_at.isoformat() if self.achieved_at else None
        }

    def __repr__(self):
        status = "Unlocked" if self.is_unlocked else "Locked"
        return f'<Achievement: {self.name} ({status})>'


class Upgrade(db.Model):
    __tablename__ = 'upgrades'

    upgrade_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255))
    base_cost = db.Column(db.Integer, nullable=False)  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    base_production = db.Column(db.Integer, nullable=False)  # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ 1 —É—Ä–æ–≤–µ–Ω—å
    
    level = db.Column(db.Integer, default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
    cost_multiplier = db.Column(db.Float, default=1.15)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã (15%)
    
    purchased_at = db.Column(db.DateTime(timezone=True), nullable=True)  # –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    # Foreign Key
    user_id = db.Column(db.Integer, db.ForeignKey('users.user_id'), nullable=False)

    def __init__(self, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        super().__init__(**kwargs)
        if self.level is None:
            self.level = 0
        if self.cost_multiplier is None:
            self.cost_multiplier = 1.15

    @property
    def current_cost(self):
        """–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è"""
        return int(self.base_cost * (self.cost_multiplier ** self.level))
    
    @property
    def current_production(self):
        """–¢–µ–∫—É—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        return self.base_production * self.level

    def purchase(self, user):
        """–ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è"""
        cost = self.current_cost
        if user.score >= cost:
            user.score -= cost
            self.level += 1
            if self.purchased_at is None:
                self.purchased_at = datetime.now()
            return True
        return False

    def to_dict(self):
        return {
            'upgrade_id': self.upgrade_id,
            'name': self.name,
            'description': self.description,
            'base_cost': self.base_cost,
            'current_cost': self.current_cost,
            'base_production': self.base_production,
            'current_production': self.current_production,
            'level': self.level,
            'purchased_at': self.purchased_at.isoformat() if self.purchased_at else None
        }

    def __repr__(self):
        return f'<Upgrade: {self.name} (Level {self.level})>'


class Skin(db.Model):
    __tablename__ = 'skins'

    skin_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255))
    base_cost = db.Column(db.Integer, nullable=False)
    is_active = db.Column(db.Boolean, default=False)
    colors = db.Column(JSON, nullable=False)
    acquired_at = db.Column(db.DateTime(timezone=True), nullable=True)  # NULL –ø–æ–∫–∞ –Ω–µ –∫—É–ø–ª–µ–Ω
    
    # Foreign Key
    user_id = db.Column(db.Integer, db.ForeignKey('users.user_id'), nullable=False)

    def activate(self):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–∫–∏–Ω –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ"""
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–∫–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Skin.query.filter_by(user_id=self.user_id).update({'is_active': False})
        self.is_active = True

    def purchase(self, user):
        """–ü–æ–∫—É–ø–∫–∞ —Å–∫–∏–Ω–∞"""
        if user.score >= self.base_cost:
            user.score -= self.base_cost
            self.acquired_at = datetime.now()
            return True
        return False

    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Skin –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'skin_id': self.skin_id,
            'name': self.name,
            'description': self.description,
            'base_cost': self.base_cost,
            'is_active': self.is_active,
            'is_owned': self.acquired_at is not None,
            'colors': self.colors,
            'acquired_at': self.acquired_at.isoformat() if self.acquired_at else None,
        }

    def __repr__(self):
        status = "Active" if self.is_active else "Inactive"
        return f'<Skin: {self.name} ({status})>'